package com.example.aadharscanner.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VILLAGE_DATA".
*/
public class VillageDataDao extends AbstractDao<VillageData, Void> {

    public static final String TABLENAME = "VILLAGE_DATA";

    /**
     * Properties of entity VillageData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BlockCode = new Property(0, String.class, "blockCode", false, "BLOCK_CODE");
        public final static Property GpCode = new Property(1, String.class, "gpCode", false, "GP_CODE");
        public final static Property VillageCode = new Property(2, String.class, "villageCode", false, "VILLAGE_CODE");
        public final static Property VillageName = new Property(3, String.class, "villageName", false, "VILLAGE_NAME");
    }


    public VillageDataDao(DaoConfig config) {
        super(config);
    }
    
    public VillageDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VILLAGE_DATA\" (" + //
                "\"BLOCK_CODE\" TEXT," + // 0: blockCode
                "\"GP_CODE\" TEXT," + // 1: gpCode
                "\"VILLAGE_CODE\" TEXT," + // 2: villageCode
                "\"VILLAGE_NAME\" TEXT);"); // 3: villageName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VILLAGE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VillageData entity) {
        stmt.clearBindings();
 
        String blockCode = entity.getBlockCode();
        if (blockCode != null) {
            stmt.bindString(1, blockCode);
        }
 
        String gpCode = entity.getGpCode();
        if (gpCode != null) {
            stmt.bindString(2, gpCode);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(3, villageCode);
        }
 
        String villageName = entity.getVillageName();
        if (villageName != null) {
            stmt.bindString(4, villageName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VillageData entity) {
        stmt.clearBindings();
 
        String blockCode = entity.getBlockCode();
        if (blockCode != null) {
            stmt.bindString(1, blockCode);
        }
 
        String gpCode = entity.getGpCode();
        if (gpCode != null) {
            stmt.bindString(2, gpCode);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(3, villageCode);
        }
 
        String villageName = entity.getVillageName();
        if (villageName != null) {
            stmt.bindString(4, villageName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VillageData readEntity(Cursor cursor, int offset) {
        VillageData entity = new VillageData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // blockCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gpCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // villageCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // villageName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VillageData entity, int offset) {
        entity.setBlockCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGpCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVillageCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVillageName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VillageData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VillageData entity) {
        return null;
    }

    @Override
    public boolean hasKey(VillageData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
