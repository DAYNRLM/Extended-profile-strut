package com.example.aadharscanner.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_TYPE".
*/
public class BankTypeDao extends AbstractDao<BankType, Void> {

    public static final String TABLENAME = "BANK_TYPE";

    /**
     * Properties of entity BankType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BankType = new Property(0, String.class, "bankType", false, "BANK_TYPE");
        public final static Property BankTypeCode = new Property(1, String.class, "bankTypeCode", false, "BANK_TYPE_CODE");
    }


    public BankTypeDao(DaoConfig config) {
        super(config);
    }
    
    public BankTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_TYPE\" (" + //
                "\"BANK_TYPE\" TEXT," + // 0: bankType
                "\"BANK_TYPE_CODE\" TEXT);"); // 1: bankTypeCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankType entity) {
        stmt.clearBindings();
 
        String bankType = entity.getBankType();
        if (bankType != null) {
            stmt.bindString(1, bankType);
        }
 
        String bankTypeCode = entity.getBankTypeCode();
        if (bankTypeCode != null) {
            stmt.bindString(2, bankTypeCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankType entity) {
        stmt.clearBindings();
 
        String bankType = entity.getBankType();
        if (bankType != null) {
            stmt.bindString(1, bankType);
        }
 
        String bankTypeCode = entity.getBankTypeCode();
        if (bankTypeCode != null) {
            stmt.bindString(2, bankTypeCode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BankType readEntity(Cursor cursor, int offset) {
        BankType entity = new BankType( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bankType
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // bankTypeCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankType entity, int offset) {
        entity.setBankType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBankTypeCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BankType entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BankType entity) {
        return null;
    }

    @Override
    public boolean hasKey(BankType entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
