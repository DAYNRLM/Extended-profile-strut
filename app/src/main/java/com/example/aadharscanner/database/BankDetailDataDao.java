package com.example.aadharscanner.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_DETAIL_DATA".
*/
public class BankDetailDataDao extends AbstractDao<BankDetailData, Void> {

    public static final String TABLENAME = "BANK_DETAIL_DATA";

    /**
     * Properties of entity BankDetailData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BankTypeCode = new Property(0, String.class, "bankTypeCode", false, "BANK_TYPE_CODE");
        public final static Property BankCode = new Property(1, String.class, "bankCode", false, "BANK_CODE");
        public final static Property EntityCode = new Property(2, String.class, "entityCode", false, "ENTITY_CODE");
        public final static Property BankName = new Property(3, String.class, "bankName", false, "BANK_NAME");
        public final static Property BankLevelCode = new Property(4, String.class, "bankLevelCode", false, "BANK_LEVEL_CODE");
        public final static Property BankAccStatus = new Property(5, String.class, "bankAccStatus", false, "BANK_ACC_STATUS");
    }


    public BankDetailDataDao(DaoConfig config) {
        super(config);
    }
    
    public BankDetailDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_DETAIL_DATA\" (" + //
                "\"BANK_TYPE_CODE\" TEXT," + // 0: bankTypeCode
                "\"BANK_CODE\" TEXT," + // 1: bankCode
                "\"ENTITY_CODE\" TEXT," + // 2: entityCode
                "\"BANK_NAME\" TEXT," + // 3: bankName
                "\"BANK_LEVEL_CODE\" TEXT," + // 4: bankLevelCode
                "\"BANK_ACC_STATUS\" TEXT);"); // 5: bankAccStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_DETAIL_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankDetailData entity) {
        stmt.clearBindings();
 
        String bankTypeCode = entity.getBankTypeCode();
        if (bankTypeCode != null) {
            stmt.bindString(1, bankTypeCode);
        }
 
        String bankCode = entity.getBankCode();
        if (bankCode != null) {
            stmt.bindString(2, bankCode);
        }
 
        String entityCode = entity.getEntityCode();
        if (entityCode != null) {
            stmt.bindString(3, entityCode);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(4, bankName);
        }
 
        String bankLevelCode = entity.getBankLevelCode();
        if (bankLevelCode != null) {
            stmt.bindString(5, bankLevelCode);
        }
 
        String bankAccStatus = entity.getBankAccStatus();
        if (bankAccStatus != null) {
            stmt.bindString(6, bankAccStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankDetailData entity) {
        stmt.clearBindings();
 
        String bankTypeCode = entity.getBankTypeCode();
        if (bankTypeCode != null) {
            stmt.bindString(1, bankTypeCode);
        }
 
        String bankCode = entity.getBankCode();
        if (bankCode != null) {
            stmt.bindString(2, bankCode);
        }
 
        String entityCode = entity.getEntityCode();
        if (entityCode != null) {
            stmt.bindString(3, entityCode);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(4, bankName);
        }
 
        String bankLevelCode = entity.getBankLevelCode();
        if (bankLevelCode != null) {
            stmt.bindString(5, bankLevelCode);
        }
 
        String bankAccStatus = entity.getBankAccStatus();
        if (bankAccStatus != null) {
            stmt.bindString(6, bankAccStatus);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BankDetailData readEntity(Cursor cursor, int offset) {
        BankDetailData entity = new BankDetailData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bankTypeCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bankCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // entityCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bankName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bankLevelCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // bankAccStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankDetailData entity, int offset) {
        entity.setBankTypeCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBankCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEntityCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBankName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBankLevelCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBankAccStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BankDetailData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BankDetailData entity) {
        return null;
    }

    @Override
    public boolean hasKey(BankDetailData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
