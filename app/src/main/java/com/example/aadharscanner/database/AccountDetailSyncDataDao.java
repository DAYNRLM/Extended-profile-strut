package com.example.aadharscanner.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_DETAIL_SYNC_DATA".
*/
public class AccountDetailSyncDataDao extends AbstractDao<AccountDetailSyncData, Long> {

    public static final String TABLENAME = "ACCOUNT_DETAIL_SYNC_DATA";

    /**
     * Properties of entity AccountDetailSyncData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutoIncrement = new Property(0, Long.class, "autoIncrement", true, "_id");
        public final static Property VillageCode = new Property(1, String.class, "villageCode", false, "VILLAGE_CODE");
        public final static Property ShgCode = new Property(2, String.class, "shgCode", false, "SHG_CODE");
        public final static Property ShgMemberCode = new Property(3, String.class, "shgMemberCode", false, "SHG_MEMBER_CODE");
        public final static Property BankBranchCode = new Property(4, String.class, "bankBranchCode", false, "BANK_BRANCH_CODE");
        public final static Property BankNameCode = new Property(5, String.class, "bankNameCode", false, "BANK_NAME_CODE");
        public final static Property IfscNumber = new Property(6, String.class, "ifscNumber", false, "IFSC_NUMBER");
        public final static Property AccountNumber = new Property(7, String.class, "accountNumber", false, "ACCOUNT_NUMBER");
        public final static Property LatLong = new Property(8, String.class, "latLong", false, "LAT_LONG");
        public final static Property SyncStatus = new Property(9, String.class, "syncStatus", false, "SYNC_STATUS");
        public final static Property PhotoImage = new Property(10, byte[].class, "photoImage", false, "PHOTO_IMAGE");
    }


    public AccountDetailSyncDataDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDetailSyncDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_DETAIL_SYNC_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: autoIncrement
                "\"VILLAGE_CODE\" TEXT," + // 1: villageCode
                "\"SHG_CODE\" TEXT," + // 2: shgCode
                "\"SHG_MEMBER_CODE\" TEXT," + // 3: shgMemberCode
                "\"BANK_BRANCH_CODE\" TEXT," + // 4: bankBranchCode
                "\"BANK_NAME_CODE\" TEXT," + // 5: bankNameCode
                "\"IFSC_NUMBER\" TEXT," + // 6: ifscNumber
                "\"ACCOUNT_NUMBER\" TEXT," + // 7: accountNumber
                "\"LAT_LONG\" TEXT," + // 8: latLong
                "\"SYNC_STATUS\" TEXT," + // 9: syncStatus
                "\"PHOTO_IMAGE\" BLOB);"); // 10: photoImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_DETAIL_SYNC_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountDetailSyncData entity) {
        stmt.clearBindings();
 
        Long autoIncrement = entity.getAutoIncrement();
        if (autoIncrement != null) {
            stmt.bindLong(1, autoIncrement);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(2, villageCode);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
 
        String shgMemberCode = entity.getShgMemberCode();
        if (shgMemberCode != null) {
            stmt.bindString(4, shgMemberCode);
        }
 
        String bankBranchCode = entity.getBankBranchCode();
        if (bankBranchCode != null) {
            stmt.bindString(5, bankBranchCode);
        }
 
        String bankNameCode = entity.getBankNameCode();
        if (bankNameCode != null) {
            stmt.bindString(6, bankNameCode);
        }
 
        String ifscNumber = entity.getIfscNumber();
        if (ifscNumber != null) {
            stmt.bindString(7, ifscNumber);
        }
 
        String accountNumber = entity.getAccountNumber();
        if (accountNumber != null) {
            stmt.bindString(8, accountNumber);
        }
 
        String latLong = entity.getLatLong();
        if (latLong != null) {
            stmt.bindString(9, latLong);
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(10, syncStatus);
        }
 
        byte[] photoImage = entity.getPhotoImage();
        if (photoImage != null) {
            stmt.bindBlob(11, photoImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountDetailSyncData entity) {
        stmt.clearBindings();
 
        Long autoIncrement = entity.getAutoIncrement();
        if (autoIncrement != null) {
            stmt.bindLong(1, autoIncrement);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(2, villageCode);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
 
        String shgMemberCode = entity.getShgMemberCode();
        if (shgMemberCode != null) {
            stmt.bindString(4, shgMemberCode);
        }
 
        String bankBranchCode = entity.getBankBranchCode();
        if (bankBranchCode != null) {
            stmt.bindString(5, bankBranchCode);
        }
 
        String bankNameCode = entity.getBankNameCode();
        if (bankNameCode != null) {
            stmt.bindString(6, bankNameCode);
        }
 
        String ifscNumber = entity.getIfscNumber();
        if (ifscNumber != null) {
            stmt.bindString(7, ifscNumber);
        }
 
        String accountNumber = entity.getAccountNumber();
        if (accountNumber != null) {
            stmt.bindString(8, accountNumber);
        }
 
        String latLong = entity.getLatLong();
        if (latLong != null) {
            stmt.bindString(9, latLong);
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(10, syncStatus);
        }
 
        byte[] photoImage = entity.getPhotoImage();
        if (photoImage != null) {
            stmt.bindBlob(11, photoImage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountDetailSyncData readEntity(Cursor cursor, int offset) {
        AccountDetailSyncData entity = new AccountDetailSyncData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autoIncrement
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // villageCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shgCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shgMemberCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bankBranchCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bankNameCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ifscNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // accountNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // latLong
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // syncStatus
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10) // photoImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountDetailSyncData entity, int offset) {
        entity.setAutoIncrement(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVillageCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShgCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShgMemberCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBankBranchCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBankNameCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIfscNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccountNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLatLong(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSyncStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhotoImage(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountDetailSyncData entity, long rowId) {
        entity.setAutoIncrement(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountDetailSyncData entity) {
        if(entity != null) {
            return entity.getAutoIncrement();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountDetailSyncData entity) {
        return entity.getAutoIncrement() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
