package com.example.aadharscanner.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KYC_DOC_SYNC_DATA".
*/
public class KycDocSyncDataDao extends AbstractDao<KycDocSyncData, Long> {

    public static final String TABLENAME = "KYC_DOC_SYNC_DATA";

    /**
     * Properties of entity KycDocSyncData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberCode = new Property(1, String.class, "memberCode", false, "MEMBER_CODE");
        public final static Property Village_code = new Property(2, String.class, "village_code", false, "VILLAGE_CODE");
        public final static Property ShgCode = new Property(3, String.class, "shgCode", false, "SHG_CODE");
        public final static Property DocId = new Property(4, String.class, "docId", false, "DOC_ID");
        public final static Property DocNo = new Property(5, String.class, "docNo", false, "DOC_NO");
        public final static Property DocFrontImage = new Property(6, byte[].class, "docFrontImage", false, "DOC_FRONT_IMAGE");
        public final static Property DocBackImage = new Property(7, byte[].class, "docBackImage", false, "DOC_BACK_IMAGE");
        public final static Property SyncStatus = new Property(8, String.class, "syncStatus", false, "SYNC_STATUS");
    }


    public KycDocSyncDataDao(DaoConfig config) {
        super(config);
    }
    
    public KycDocSyncDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KYC_DOC_SYNC_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEMBER_CODE\" TEXT," + // 1: memberCode
                "\"VILLAGE_CODE\" TEXT," + // 2: village_code
                "\"SHG_CODE\" TEXT," + // 3: shgCode
                "\"DOC_ID\" TEXT," + // 4: docId
                "\"DOC_NO\" TEXT," + // 5: docNo
                "\"DOC_FRONT_IMAGE\" BLOB," + // 6: docFrontImage
                "\"DOC_BACK_IMAGE\" BLOB," + // 7: docBackImage
                "\"SYNC_STATUS\" TEXT);"); // 8: syncStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KYC_DOC_SYNC_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KycDocSyncData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberCode = entity.getMemberCode();
        if (memberCode != null) {
            stmt.bindString(2, memberCode);
        }
 
        String village_code = entity.getVillage_code();
        if (village_code != null) {
            stmt.bindString(3, village_code);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(4, shgCode);
        }
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(5, docId);
        }
 
        String docNo = entity.getDocNo();
        if (docNo != null) {
            stmt.bindString(6, docNo);
        }
 
        byte[] docFrontImage = entity.getDocFrontImage();
        if (docFrontImage != null) {
            stmt.bindBlob(7, docFrontImage);
        }
 
        byte[] docBackImage = entity.getDocBackImage();
        if (docBackImage != null) {
            stmt.bindBlob(8, docBackImage);
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(9, syncStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KycDocSyncData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberCode = entity.getMemberCode();
        if (memberCode != null) {
            stmt.bindString(2, memberCode);
        }
 
        String village_code = entity.getVillage_code();
        if (village_code != null) {
            stmt.bindString(3, village_code);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(4, shgCode);
        }
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(5, docId);
        }
 
        String docNo = entity.getDocNo();
        if (docNo != null) {
            stmt.bindString(6, docNo);
        }
 
        byte[] docFrontImage = entity.getDocFrontImage();
        if (docFrontImage != null) {
            stmt.bindBlob(7, docFrontImage);
        }
 
        byte[] docBackImage = entity.getDocBackImage();
        if (docBackImage != null) {
            stmt.bindBlob(8, docBackImage);
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(9, syncStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KycDocSyncData readEntity(Cursor cursor, int offset) {
        KycDocSyncData entity = new KycDocSyncData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // memberCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // village_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shgCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // docId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // docNo
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // docFrontImage
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7), // docBackImage
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // syncStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KycDocSyncData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVillage_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShgCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDocId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDocNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDocFrontImage(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setDocBackImage(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
        entity.setSyncStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KycDocSyncData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KycDocSyncData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KycDocSyncData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
