package com.example.aadharscanner.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER_LOAN_STATUS_DATA".
*/
public class MemberLoanStatusDataDao extends AbstractDao<MemberLoanStatusData, Void> {

    public static final String TABLENAME = "MEMBER_LOAN_STATUS_DATA";

    /**
     * Properties of entity MemberLoanStatusData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LoanStatus = new Property(0, String.class, "loanStatus", false, "LOAN_STATUS");
        public final static Property LoanStatusId = new Property(1, String.class, "loanStatusId", false, "LOAN_STATUS_ID");
    }


    public MemberLoanStatusDataDao(DaoConfig config) {
        super(config);
    }
    
    public MemberLoanStatusDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER_LOAN_STATUS_DATA\" (" + //
                "\"LOAN_STATUS\" TEXT," + // 0: loanStatus
                "\"LOAN_STATUS_ID\" TEXT);"); // 1: loanStatusId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER_LOAN_STATUS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemberLoanStatusData entity) {
        stmt.clearBindings();
 
        String loanStatus = entity.getLoanStatus();
        if (loanStatus != null) {
            stmt.bindString(1, loanStatus);
        }
 
        String loanStatusId = entity.getLoanStatusId();
        if (loanStatusId != null) {
            stmt.bindString(2, loanStatusId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemberLoanStatusData entity) {
        stmt.clearBindings();
 
        String loanStatus = entity.getLoanStatus();
        if (loanStatus != null) {
            stmt.bindString(1, loanStatus);
        }
 
        String loanStatusId = entity.getLoanStatusId();
        if (loanStatusId != null) {
            stmt.bindString(2, loanStatusId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MemberLoanStatusData readEntity(Cursor cursor, int offset) {
        MemberLoanStatusData entity = new MemberLoanStatusData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // loanStatus
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // loanStatusId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemberLoanStatusData entity, int offset) {
        entity.setLoanStatus(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLoanStatusId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MemberLoanStatusData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MemberLoanStatusData entity) {
        return null;
    }

    @Override
    public boolean hasKey(MemberLoanStatusData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
