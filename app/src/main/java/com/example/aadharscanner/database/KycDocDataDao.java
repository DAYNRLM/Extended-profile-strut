package com.example.aadharscanner.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KYC_DOC_DATA".
*/
public class KycDocDataDao extends AbstractDao<KycDocData, Void> {

    public static final String TABLENAME = "KYC_DOC_DATA";

    /**
     * Properties of entity KycDocData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DocId = new Property(0, String.class, "docId", false, "DOC_ID");
        public final static Property DocName = new Property(1, String.class, "docName", false, "DOC_NAME");
        public final static Property DocType = new Property(2, String.class, "docType", false, "DOC_TYPE");
        public final static Property DocNolength = new Property(3, String.class, "docNolength", false, "DOC_NOLENGTH");
        public final static Property DocInputType = new Property(4, String.class, "docInputType", false, "DOC_INPUT_TYPE");
    }


    public KycDocDataDao(DaoConfig config) {
        super(config);
    }
    
    public KycDocDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KYC_DOC_DATA\" (" + //
                "\"DOC_ID\" TEXT," + // 0: docId
                "\"DOC_NAME\" TEXT," + // 1: docName
                "\"DOC_TYPE\" TEXT," + // 2: docType
                "\"DOC_NOLENGTH\" TEXT," + // 3: docNolength
                "\"DOC_INPUT_TYPE\" TEXT);"); // 4: docInputType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KYC_DOC_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KycDocData entity) {
        stmt.clearBindings();
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(1, docId);
        }
 
        String docName = entity.getDocName();
        if (docName != null) {
            stmt.bindString(2, docName);
        }
 
        String docType = entity.getDocType();
        if (docType != null) {
            stmt.bindString(3, docType);
        }
 
        String docNolength = entity.getDocNolength();
        if (docNolength != null) {
            stmt.bindString(4, docNolength);
        }
 
        String docInputType = entity.getDocInputType();
        if (docInputType != null) {
            stmt.bindString(5, docInputType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KycDocData entity) {
        stmt.clearBindings();
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(1, docId);
        }
 
        String docName = entity.getDocName();
        if (docName != null) {
            stmt.bindString(2, docName);
        }
 
        String docType = entity.getDocType();
        if (docType != null) {
            stmt.bindString(3, docType);
        }
 
        String docNolength = entity.getDocNolength();
        if (docNolength != null) {
            stmt.bindString(4, docNolength);
        }
 
        String docInputType = entity.getDocInputType();
        if (docInputType != null) {
            stmt.bindString(5, docInputType);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public KycDocData readEntity(Cursor cursor, int offset) {
        KycDocData entity = new KycDocData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // docId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // docName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // docType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // docNolength
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // docInputType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KycDocData entity, int offset) {
        entity.setDocId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDocName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDocType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDocNolength(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDocInputType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(KycDocData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(KycDocData entity) {
        return null;
    }

    @Override
    public boolean hasKey(KycDocData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
